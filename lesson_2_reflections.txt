What happens when you initialize a repository? Why do you need to do it?
It creates a .git hidden file that contains the metadata related to the repository. This is needed to maintain the history of all the files in the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging area lets to choose the files to be committed instead of committing all the files of the repository. This way, it helps to divide our committs into logical parts.

How can you use the staging area to make sure you have one commit per logical
change?
By using staging area we can only commit the files that we want to commit instead of committing the changes made on all files in the working directory, thereby allowing logical change per commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches would be very helpful when you want to create an experimental change that you may or may not include in the final project. Example: Developing a game in 2 different languages(english and telugu) 
Branches help by compartmentalize your new changes. They help in creating 2 differnet seperate versions which can be merged later when a clear decision is made on the new changes.

How do the diagrams help you visualize the branch structure?
The diagrams show the parent of each commit there by easily helping us to backtrack to the initial commit and also helping us to find out the commits that are unreachable. It also helps us to know the braches in the repository and their current states. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
The result of merging two branches is to combine the changes made to one branch when a feature or a branch is completed. The merge command merges the branch given as argument to the current checked out branch. Now the new merged state is labelled with the current checked out branch. Diagrammtic representation helps to easily recognize when the different branches have megrged and the differnet changes made in different branches before merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
Automatic merging helps to easily merge changes that are made to two different files. But, if a single file is changed in two different branches, then it is manually merged to include only the changes that are correct. There by eliminating failures to the code.

